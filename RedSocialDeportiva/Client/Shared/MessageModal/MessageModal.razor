@inject StoreGlobal.GlobalStore storeGlobal;
@implements IDisposable;

<article class="@(!storeGlobal.IsShowMessageModal() ? OpenModalCss : CloseModalCss)">
@*<article class="@(storeGlobal.IsShowMessageModal() ? OpenModalCss : CloseModalCss)">*@
  <div>
    <article class="contentModal">
      @*<p>@storeGlobal.GetMessageModal()</p> *@
      <div>ASDNDKWQNDKWQNDLKANDKQLWASDNDKWQNDKWQNDLKANDKQLWASDNDKWQNDKWQNDLKANDKQLWASDNDKWQNDKWQNDLKANDKQLWASDNDKWQNDKWQNDLKANDKQLWASDNDKWQNDKWQNDLKANDKQLWASDNDKWQNDKWQNDLKANDKQLWASDNDKWQNDKWQNDLKANDKQLWASDNDKWQNDKWQNDLKANDKQLWASDNDKWQNDKWQNDLKANDKQLWASDNDKWQNDKWQNDLKANDKQLWASDNDKWQNDKWQNDLKANDKQLWASDNDKWQNDKWQNDLKANDKQLW</div> 
      <i class="fa-solid fa-face-laugh-beam"/>
    </article>
  </div>
</article>

@code {

    public string OpenModalCss { get; set; } = "containerModal openModal";    
    public string CloseModalCss { get; set; } = "containerModal";


    #region Ciclo de vida del componente./ Store.
    
    protected override void OnInitialized()
    {
        storeGlobal.SubscribeChangedState(updateComponent);
    }
    
    public void Dispose()
    {
        storeGlobal.DesubscribeChangedState(updateComponent);
    }
    
    #endregion


    #region METODOS

        private void updateComponent() => StateHasChanged();  

    #endregion
}

@page "/"; 
@inject LoginAndRegisterStore store;
@implements IDisposable;
@using RedSocialDeportiva.Client.Pages.LoginAndRegister.Components;



@*LOADER*@
<PageTitle>Inicio</PageTitle>


<main class="mainLoginAndRegister">

    <div class="containerPage">

        <section class="containerPage__Background">

            <MessageLogin/>

            <MessageRegister/>

        </section>

        <section class="containerPage__LoginAndRegister @store.GetClassCssFormModifed()">

            <FormLogin />
            
            <FormRegister />

        </section>

    </div>

</main>


@code{




    #region Ciclo Vida componente

    protected override void OnInitialized()
    {
        store.SubscribeChangedState(updateView);

        store.ChangeClassCssForm();

    }
    // Posible:Ejecutar con el ultimo metodo de ciclo de vida.
    

    // Elimina recursos no administrados cuando el componente se elimina de la interfaz del usuario.
    // Ergo, elimina el recurso de escuchar los cambios del Store. 
    // Nota: Utilziar @implements IDispose.
    public void Dispose() => store.DesubscribeChangedState(updateView); 

    #endregion

    #region Metodos relacionado al Store


    private void updateView() => StateHasChanged(); 

    #endregion





    #region METODOS



    public void change() {
        store.SetLoginActive(!store.IsLoginActive());
    }

    #endregion

}
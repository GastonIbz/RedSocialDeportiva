@inject ConsoleJS consoleJS;
@inject LoginAndRegisterStore store;
@inject StoreGlobal.GlobalStore storeGlobal;
@inject LoginAndRegisterService userService;
@inject NavigationManager NavigationManager;
@implements IDisposable;
@using RedSocialDeportiva.Client.Pages.LoginAndRegister.Components;




<div class="containerFormLogin @(store.IsLoginActive() ? "containerFormLogin--show" : "containerFormLogin--hide")" >

    <h2>Iniciar Sesion</h2> 


    <EditForm EditContext="editFormContext" OnValidSubmit="HandleLogin">
            
        <DataAnnotationsValidator/>

        
            @* Email *@
            <div>
                <label for="Email">Correo electronico: </label>
                <div>
                    <InputText 
                        id="Email"
                        @bind-Value="store.GetFormLogin().Email"  
                        type="email" 
                        class="form-control col-sm-3" 
                    ></InputText>
                    <ValidationMessage For="(() => store.GetFormLogin().Email)"/>  
                </div>
            </div>

            @*Contraseña *@ 
            <div>
                <label for="Password">Contraseña: </label>
                <div>
                    <InputText 
                        id="Password"
                        @bind-Value="store.GetFormLogin().Password"  
                        type="password"
                        class="form-control col-sm-3" 
                    ></InputText>

                    <ValidationMessage For="(() => store.GetFormLogin().Password)"/>  
                </div>
            </div>

            <br />
    
            <button type="submit" class="btn btn-primary" disabled="@isFormInvalid">Iniciar Sesion</button>
   
    </EditForm>


</div>


@code {

    #region VARIABLES

    private EditContext editFormContext;
    private bool isFormInvalid = false;

    #endregion


    #region Ciclo de vida del componente

    protected override void OnInitialized()
    {
        // State
        storeGlobal.SubscribeChangedState(updateComponent);
        store.SubscribeChangedState(updateComponent);

        // Formulario
        editFormContext = new(store.GetFormLogin());
        editFormContext.OnFieldChanged += updateChangedFieldForm;
    }

    public void Dispose()
    {
        store.DesubscribeChangedState(updateComponent);
        storeGlobal.DesubscribeChangedState(updateComponent);
    }

    #endregion



    #region METODOS 

    private void updateComponent() => StateHasChanged();  

    private void updateChangedFieldForm (object? sender, FieldChangedEventArgs e)
    {
        if (editFormContext != null)
        {
            isFormInvalid = !editFormContext.Validate();
            updateComponent();
        }
    }

    private async Task HandleLogin()
    {
        try
        {

            // Abrir Loader ... 

            var (UserModels, MessageError) = await userService.Login(store.GetFormLogin());

            if (UserModels == null || MessageError != null)
            {
                throw new Exception(MessageError);
            }

            storeGlobal.SetMyUserData(UserModels);

            NavigationManager.NavigateTo("Home");

        }
        catch (Exception ex)
        {
            consoleJS.log("Message: ", ex.Message);
            
            // Abrir modal error mostrando error

        }
        finally
        {
            // cerrar Loader...
            // setTimeOut para cerrar Modal
            store.ResetFormLogin();
        }
    }


    #endregion
      
}

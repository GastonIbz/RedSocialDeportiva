@inject ConsoleJS consoleJS;
@inject LoginAndRegisterStore store;
@inject StoreGlobal.GlobalStore storeGlobal;
@inject LoginAndRegisterService userService;
@inject NavigationManager NavigationManager;

@using RedSocialDeportiva.Client.Pages.LoginAndRegister.Components;




<div class="containerFormLogin @(store.IsLoginActive() ? "containerFormLogin--show" : "containerFormLogin--hide")" >

    <h2>Iniciar Sesion</h2> 


    <EditForm EditContext="editFormContext" OnValidSubmit="HandleLogin">
            
        <DataAnnotationsValidator/>

        
            @* Email *@
            <div>
                <label for="Email">Correo electronico: </label>
                <div class="FormLogin">
                    <InputText 
                        id="Email"
                        @bind-Value="store.GetFormLogin().Email"  
                        type="email" 
                        class="form-control col-sm-3" 
                    ></InputText>
                    <ValidationMessage For="(() => store.GetFormLogin().Email)"/>  
                </div>
            </div>

            @*Contraseña *@ 
            <div>
                <label for="Password">Contraseña: </label>
                <div>
                    <InputText 
                        id="Password"
                        @bind-Value="store.GetFormLogin().Password"  
                        type="password"
                        class="form-control col-sm-3" 
                    ></InputText>

                    <ValidationMessage For="(() => store.GetFormLogin().Password)"/>  
                </div>
            </div>

            <br />
    
            <button type="submit" class="btn btn-primary">Iniciar Sesion</button>
   
    </EditForm>


</div>


@code {

    #region VARIABLES

    private EditContext editFormContext;

    private bool formInvalid = false;


    #endregion


    #region Ciclo de vida del componente.// "CONSTRUCTOR"

    protected override void OnInitialized()
    {
        // State
        storeGlobal.SubscribeChangedState(updateView);
        store.SubscribeChangedState(updateView);

        // Formulario
        editFormContext = new(store.GetFormLogin());
        editFormContext.OnFieldChanged += HandleFieldFormChanged;
    }

    /// METODO QUE CIERRE EL CICLO DE VIDA.

    #endregion



    #region METODOS 

    /// TODO: DIVIR EN METODOS PARA EL CICLO DE VIDA Y DEL STORE COMO EN INDEX
    /// 
    private void updateView() => StateHasChanged(); // Metodo relacionado al Store    

    private void HandleFieldFormChanged(object? sender, FieldChangedEventArgs e)
    {
        if (editFormContext is not null)
        {
            formInvalid = !editFormContext.Validate();
            updateView();
        }
    }


    private async Task HandleLogin()
    {
        try
        {

            // Abrir Loader ... 

            //var (UserModels, MessageError) = await userService.login(store.GetFormLogin());

            //if (UserModels == null || MessageError != null)
            //{
            //    throw new Exception(MessageError);
            //}

            //storeGlobal.SetMyUserData(UserModels);

            NavigationManager.NavigateTo("Home");

        }
        catch (Exception ex)
        {
            consoleJS.log("Message: ", ex.Message);
            
            // Abrir modal error mostrando error

        }
        finally
        {
            // cerrar Loader...
            // setTimeOut para cerrar Modal
            store.ResetFormLogin();
        }
    }

    












    #endregion
      
}

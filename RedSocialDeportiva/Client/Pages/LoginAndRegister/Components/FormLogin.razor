@inject LoginAndRegisterStore store;
@inject ConsoleJS consoleJS;
@inject UserService userService;
@inject NavigationManager NavigationManager;

<h2>Iniciar Sesion</h2>

<EditForm EditContext="editFormContext" OnValidSubmit="HandleLogin">

        <DataAnnotationsValidator/>

        @*Email *@
        <div>
            <label for="Email">Correo electronico: </label>
            <div>
                <InputText 
                    id="Email"
                    @bind-Value="store.GetFormLogin().Email" 
                    type="email"
                    class="form-control col-sm-3" 
                ></InputText>
                <ValidationMessage For="(() => store.GetFormLogin().Email)"/>  
            </div>
        </div>

        @*Contraseña *@
        <div>
            <label for="Password">Contraseña: </label>
            <div>
                <InputText 
                    id="Password"
                    @bind-Value="store.GetFormLogin().Password"  
                    type="password"
                    class="form-control col-sm-3" 
                ></InputText>
                <ValidationMessage For="(() => store.GetFormLogin().Password)"/>  
            </div>
        </div>

        <br />
    
        <button type="submit" class="btn btn-primary">Iniciar Sesion</button>
   
</EditForm>

@code {

    #region VARIABLES

        private EditContext editFormContext;
        private bool formInvalid = false;

    #endregion


    #region Ciclo de vida del componente.// "CONSTRUCTOR"

        protected override void OnInitialized()
        {
            // State
            store.AddStateChangeListeners(updateView);

            // Formulario
            editFormContext = new(store.GetFormLogin());
            editFormContext.OnFieldChanged += HandleFieldFormChanged;
        }

    #endregion



    #region METODOS 

        private void updateView() => StateHasChanged(); // Metodo relacionado al Store    

        private void HandleFieldFormChanged(object? sender, FieldChangedEventArgs e)
        {
            if (editFormContext is not null)
            {
                formInvalid = !editFormContext.Validate();
                updateView();
            }
        }

        
        private async Task HandleLogin()
        {
            // TODO: Ver LoginAndRegister.tsx
            /* 
                Pendings: 
                - Hacer maquetado CSS de Todo
                - Realizar tema de Loader (mientras hace el http)
                - Realizar tema del Modal
                - Almacenar resultado en Store.
            */

            //consoleJS.log("Handle Login", store.GetFormLogin());
            var (UserModels, MessageError) = await userService.login();

            consoleJS.log("Return Login", UserModels);
            consoleJS.log("Return MessageError", MessageError);

            //NavigationManager.NavigateTo("hero");
        }














    #endregion
      
}

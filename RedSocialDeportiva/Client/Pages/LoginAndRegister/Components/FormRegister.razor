@inject LoginAndRegisterStore store;
@inject StoreGlobal.GlobalStore storeGlobal;
@inject ConsoleJS consoleJS;
@inject LoginAndRegisterService userService;
@inject NavigationManager NavigationManager;
@implements IDisposable;


<div class="containerFormRegister @(store.IsRegisterActive() ? "containerFormRegister--show" : "containerFormRegister--hide")" >

    <h2>Registrarse</h2>

    <EditForm EditContext="editFormContext" OnValidSubmit="HandleRegister">

        <DataAnnotationsValidator/>


            @*Email *@
            <div>
                <label for="Email">Correo electronico: </label>
                <div>
                    <InputText 
                        id="Email"
                        @bind-Value="store.GetFormRegister().Email" 
                        type="email"
                        class="form-control col-sm-3" 
                    ></InputText>
                    <ValidationMessage For="(() => store.GetFormRegister().Email)"/>
                 </div>
            </div>
        
            @*Usuario *@
            <div>
                <label for="UserName">Usuario: </label>
                <div>
                    <InputText 
                        id="UserName"
                        @bind-Value="store.GetFormRegister().UserName" 
                        type="text"
                        class="form-control col-sm-3" 
                    ></InputText>
                    <ValidationMessage For="(() => store.GetFormRegister().UserName)"/>
                 </div>
            </div>

            @*Contraseña *@
            <div>
                <label for="Password">Contraseña: </label>
                <div>
                    <InputText 
                        id="Passowrd"
                        @bind-Value="store.GetFormRegister().Password"  
                        type="password"
                        class="form-control col-sm-3" 
                    ></InputText>
                    <ValidationMessage For="(() => store.GetFormRegister().Password)"/>
                </div>
            </div>
        
            @*Confirmar contraseña *@
            <div>
                <label for="ConfirmPassword">Confirmar contraseña: </label>
                <div>
                    <InputText 
                        id="ConfirmPassword"
                        @bind-Value="store.GetFormRegister().ConfirmPassword"  
                        type="password"
                        class="form-control col-sm-3" 
                    ></InputText>
                    <ValidationMessage For="(() => store.GetFormRegister().ConfirmPassword)"/>    
                </div>
            </div>

            <br />
    
            <button type="submit" class="btn btn-primary" disabled="@isFormInvalid">Registrarse</button>


    </EditForm>

</div>

@code {

    #region VARIABLES

    private EditContext editFormContext;
    private bool isFormInvalid = false;

    #endregion

    #region Ciclo de vida del componente.// "CONSTRUCTOR"

    protected override void OnInitialized()
    {
        // State
        storeGlobal.SubscribeChangedState(updateComponent);
        store.SubscribeChangedState(updateComponent);


        // Formulario
        editFormContext = new(store.GetFormRegister());
        editFormContext.OnFieldChanged += updateChangedFieldForm;
    }

    public void Dispose()
    {
        storeGlobal.DesubscribeChangedState(updateComponent);
        store.DesubscribeChangedState(updateComponent);
    }

    #endregion


    #region METODOS 

    private void updateComponent() => StateHasChanged(); 

    private void updateChangedFieldForm(object? sender, FieldChangedEventArgs e)
    {
        if (editFormContext != null)
        {
            isFormInvalid = !editFormContext.Validate();
            StateHasChanged();
        }
    }

    private async Task HandleRegister()
    {
        try
        {

            storeGlobal.SetShowLoader(true);

            var (Data, MessageError) = await userService.Register(store.GetFormRegister());


            if (Data == null || MessageError != null)
            {
                throw new Exception(MessageError);
            }

            store.SetLoginActive(true);
            store.SetRegisterActive(false);
            
            storeGlobal.SetShowLoader(false);
            storeGlobal.SetMessageModal(Data);
            storeGlobal.SetShowMessageModal(true);

        }
        catch (Exception ex)
        {
            storeGlobal.SetMessageModal(ex.Message);
            storeGlobal.SetShowMessageModal(true);
        }
        finally
        {
            storeGlobal.SetShowLoader(false);
            store.ResetFormRegister();

            var timer = new PeriodicTimer(TimeSpan.FromSeconds(3));
            Task.Run(async () => {
                await Task.Delay(4000);
                timer.Dispose();
            });

            while (await timer.WaitForNextTickAsync())
            {
                storeGlobal.SetShowMessageModal(false);
            }
        }

    }

    #endregion



      
}
@inject LoginAndRegisterStore store;
@inject StoreGlobal.Store storeGlobal;
@inject ConsoleJS consoleJS;
@inject LoginAndRegisterService userService;
@inject NavigationManager NavigationManager;
<h2>Registrarse</h2>

<EditForm EditContext="editFormContext" OnValidSubmit="HandleRegister">

    <DataAnnotationsValidator/>


        @*Email *@
        <div>
            <label for="Email">Correo electronico: </label>
            <div>
                <InputText 
                    id="Email"
                    @bind-Value="store.GetFormRegister().Email" 
                    type="email"
                    class="form-control col-sm-3" 
                ></InputText>
                <ValidationMessage For="(() => store.GetFormRegister().Email)"/>
             </div>
        </div>

        @*Nombre completo *@
        <div>
            <label for="NameCompleted">Nombere Completo: </label>
            <div>
                <InputText 
                    id="NameCompleted"
                    @bind-Value="store.GetFormRegister().NameCompleted" 
                    type="text"
                    class="form-control col-sm-3" 
                ></InputText>
                <ValidationMessage For="(() => store.GetFormRegister().NameCompleted)"/>
             </div>
        </div> 
        
        @*Usuario *@
        <div>
            <label for="UserName">Usuario: </label>
            <div>
                <InputText 
                    id="UserName"
                    @bind-Value="store.GetFormRegister().UserName" 
                    type="text"
                    class="form-control col-sm-3" 
                ></InputText>
                <ValidationMessage For="(() => store.GetFormRegister().UserName)"/>
             </div>
        </div>

        @*Contraseña *@
        <div>
            <label for="Password">Contraseña: </label>
            <div>
                <InputText 
                    id="Passowrd"
                    @bind-Value="store.GetFormRegister().Password"  
                    type="password"
                    class="form-control col-sm-3" 
                ></InputText>
                <ValidationMessage For="(() => store.GetFormRegister().Password)"/>
            </div>
        </div>
        
        @*Confirmar contraseña *@
        <div>
            <label for="ConfirmPassword">Confirmar contraseña: </label>
            <div>
                <InputText 
                    id="ConfirmPassword"
                    @bind-Value="store.GetFormRegister().ConfirmPassword"  
                    type="password"
                    class="form-control col-sm-3" 
                ></InputText>
                <ValidationMessage For="(() => store.GetFormRegister().ConfirmPassword)"/>    
            </div>
        </div>

        <br />
    
        <button type="submit" class="btn btn-primary" disabled="@formInvalid">Registrarse</button>


</EditForm>

@code {

    #region VARIABLES

    private EditContext editFormContext;
    private bool formInvalid = false;

    #endregion

    #region Ciclo de vida del componente.// "CONSTRUCTOR"

    protected override void OnInitialized()
    {
        // State
        store.AddStateChangeListeners(updateView);

        // Formulario
        editFormContext = new(store.GetFormRegister());
        editFormContext.OnFieldChanged += HandleFieldFormChanged;
    }

    #endregion


    #region METODOS 

    private void updateView() => StateHasChanged(); // Metodo relacionado al Store    

    private void HandleFieldFormChanged(object? sender, FieldChangedEventArgs e)
    {
        if (editFormContext is not null)
        {
            formInvalid = !editFormContext.Validate();
            StateHasChanged();
        }
    }


    private async Task HandleRegister()
    {

        var  MessageError = await userService.register(store.GetFormRegister());

        if (MessageError != "")
        {
            /// strR



        }



        NavigationManager.NavigateTo("Home");
        store.ResetFormRegister();

    }











    #endregion



      
}
